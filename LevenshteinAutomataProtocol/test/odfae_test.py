import numpy as np
from phe import paillier
import base64

import src.odfae as odfae
import src.utils as utils
import src.communication as com


class TestUtilsFunctions:
    def test_permute(self):
        r = 1
        n = 5
        for i, j in zip(range(n - 1), range(1, n)):
            assert odfae.permute(r, i, n) == i + 1
            assert odfae.permute(r, j, n, True) == j - 1

    def test_split_key(self):
        state = b'\x00\x03'
        key = b'\x11' * odfae.KEY_LEN
        q, k = odfae.split_key(2, state + key)
        assert q == 3
        assert k == key


pk = paillier.PaillierPublicKey(
    4705964732092977493086560386626438048649770880106897606640175205624197690750367272440666727504085607422359977335364696343395617147790470047733181992863396832514046398178993554292914294607596219141734268595540841764868526547598736674979799677053344349025047288187883881695725168351269815356657204595180275392828995931784858863832323860404328784960107613095366915473222390134631179939277264553302486521711492033377089927053545136665203140994076281291195138959457341970151637024559053874199454615327612566393737681740426222549933002787272137607562298344970110347950396603331436673422279458426930732797166388049887143349262585827154707654438498208237696601002730548857968225543428481703759812857485951990913001916951022415219873772852840379251239884929469753627445213041367043517569889112807457946245543286970212231684157609315549247222376857125705895589430693584324384034004523384628795228251136860868267269973394155433419135699)
sk = paillier.PaillierPrivateKey(
    pk,
    2140796533195830358354160316221708910835711537152069320108748635547855374428236639648423715008741750787380806223756721022258223927767632823953488522226447288394932121696251209764926046152337675673111322872830211047274905609258739334049529536788371311192889102709819475724501651502717029020262523285846043126177950205206625357609239048974070841111945769782752881431049900675137245894518977864684741384370743226287631765101608402655738245944799723125521193828835307,
    2198230732870164444031948375988524765946016321007894680092417213162154083126545029263731250047524707028001391114371399815442343989961053815928658686728739115722980585107539875742203472802699196804429316314227090040807559064191500674725578641384808612595233056457770616333195165587359377004850148080167155984738499283023210493500136419669357896187997588597782317502482187482650945108220776542434677421412566829729683055497690499223459410023354372837538048075177657
)

alpha1 = utils.Alphabet('01')
dfa1 = utils.DFA(0, np.array([[3, 1], [2, 1], [2, 1], [3, 3]]), alpha1, {2})

alpha2 = utils.Alphabet('abc')
dfa2 = utils.DFA(0, np.array([[1, 4, 4], [4, 2, 4], [4, 4, 3], [4, 4, 4], [4, 4, 4]]), alpha2, {3})


def test_garbler():
    socket = com.ServerSocket(9000)
    try:
        garbler = odfae.Garbler(dfa1, pk, socket)
        garbler.serve_evaluation(4)
        garbler.serve_evaluation(5)

        garbler = odfae.Garbler(dfa2, pk, socket)
        garbler.serve_evaluation(3)
        garbler.serve_evaluation(6)
    finally:
        socket.socket.close()


def test_evaluator():
    socket = com.ClientSocket('localhost', 9000)
    try:
        evaluator = odfae.Evaluator(pk, sk, socket, alpha1, 1)
        assert evaluator.evaluate("1010")
        assert not evaluator.evaluate("10001")

        evaluator = odfae.Evaluator(pk, sk, socket, alpha2, 1)
        assert evaluator.evaluate("abc")
        assert not evaluator.evaluate("abcaac")
    finally:
        socket.socket.close()
